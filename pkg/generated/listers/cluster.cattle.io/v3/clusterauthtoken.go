/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by wrangler_test. DO NOT EDIT.

package v3

import (
	v3 "github.com/tomleb/wrangler_test/pkg/apis/cluster.cattle.io/v3"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterAuthTokenLister helps list ClusterAuthTokens.
// All objects returned here must be treated as read-only.
type ClusterAuthTokenLister interface {
	// List lists all ClusterAuthTokens in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v3.ClusterAuthToken, err error)
	// ClusterAuthTokens returns an object that can list and get ClusterAuthTokens.
	ClusterAuthTokens(namespace string) ClusterAuthTokenNamespaceLister
	ClusterAuthTokenListerExpansion
}

// clusterAuthTokenLister implements the ClusterAuthTokenLister interface.
type clusterAuthTokenLister struct {
	indexer cache.Indexer
}

// NewClusterAuthTokenLister returns a new ClusterAuthTokenLister.
func NewClusterAuthTokenLister(indexer cache.Indexer) ClusterAuthTokenLister {
	return &clusterAuthTokenLister{indexer: indexer}
}

// List lists all ClusterAuthTokens in the indexer.
func (s *clusterAuthTokenLister) List(selector labels.Selector) (ret []*v3.ClusterAuthToken, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.ClusterAuthToken))
	})
	return ret, err
}

// ClusterAuthTokens returns an object that can list and get ClusterAuthTokens.
func (s *clusterAuthTokenLister) ClusterAuthTokens(namespace string) ClusterAuthTokenNamespaceLister {
	return clusterAuthTokenNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterAuthTokenNamespaceLister helps list and get ClusterAuthTokens.
// All objects returned here must be treated as read-only.
type ClusterAuthTokenNamespaceLister interface {
	// List lists all ClusterAuthTokens in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v3.ClusterAuthToken, err error)
	// Get retrieves the ClusterAuthToken from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v3.ClusterAuthToken, error)
	ClusterAuthTokenNamespaceListerExpansion
}

// clusterAuthTokenNamespaceLister implements the ClusterAuthTokenNamespaceLister
// interface.
type clusterAuthTokenNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterAuthTokens in the indexer for a given namespace.
func (s clusterAuthTokenNamespaceLister) List(selector labels.Selector) (ret []*v3.ClusterAuthToken, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.ClusterAuthToken))
	})
	return ret, err
}

// Get retrieves the ClusterAuthToken from the indexer for a given namespace and name.
func (s clusterAuthTokenNamespaceLister) Get(name string) (*v3.ClusterAuthToken, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v3.Resource("clusterauthtoken"), name)
	}
	return obj.(*v3.ClusterAuthToken), nil
}
